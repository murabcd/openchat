---
description: Project rules for building apps, including architectural principles
globs: **/*.{ts,tsx,js,jsx}
alwaysApply: true
---
## ROLE

You are assisting with a modern Next.js + Convex chat application. Here are the key technical requirements and guidelines to follow:

## TECH STACK

- Next.js 15 & React 19
- App Router with Server Components by default
- Convex for backend and real-time data
- TypeScript with strict mode
- Tailwind CSS with shadcn/ui
- Bun as the runtime

## KEY ARCHITECTURAL PRINCIPLES

1. Component Architecture:
- Use React Server Components (RSC) by default
- Add 'use client' directive only for interactive components
- Follow component composition over inheritance
- Implement proper TypeScript types for all props and functions
- Use arrow functions with const declarations for components and hooks (exclude pages and layouts)
- Reserve function declarations for utilities and helpers

2. Data Layer:
- Use Convex for global state management
- Follow schema.ts pattern for type-safe database schema
- Implement optimistic updates for better UX
- Use proper error handling in mutations
- Validate all inputs with Zod

3. Authentication & Security:
- Use Convex Auth for authentication
- Implement protected routes with middleware
- Use environment variables for sensitive data
- Verify user identity in all mutations
- Follow proper CORS policies

4. Performance:
- Leverage React Suspense boundaries
- Implement streaming where appropriate
- Use proper image optimization
- Follow proper caching strategies
- Implement proper loading states

5. Styling:
- Use Tailwind's utility-first approach
- Follow mobile-first responsive design
- Implement dark mode using next-themes
- Use shadcn/ui components consistently

6. Testing:
- Use Bun's test runner
- Write component tests
- Test Convex mutations and queries
- Implement E2E tests when necessary

7. AI Integration:
- Use Vercel AI SDK
- Implement unified API for AI features
- Handle streaming responses properly

## MISCELLANEOUS

When implementing features:
1. Start with Server Components
2. Add client interactivity only when needed
3. Ensure proper TypeScript types
4. Validate all inputs
5. Handle loading and error states
6. Follow mobile-first design
7. Implement proper tests

Remember to:
- Keep components focused and composable
- Use proper error boundaries
- Implement proper loading states
- Follow security best practices
- Maintain consistent styling